require 'tmpdir'
require 'digest/sha1'

namespace :load do
  task :defaults do
    set_if_empty :drive_env_spreadsheet_url, ->{ nil }
    set_if_empty :drive_env_local_path,      ->{ "config/deploy/#{fetch(:stage)}.env" }
    set_if_empty :drive_env_remote_path,     ->{ shared_path.join(".env") }
    set_if_empty :drive_env_role,            ->{ :app }
  end
end

namespace :drive_env do
  desc "Generate env file from spreadsheet"
  task :to_env do
    if fetch(:drive_env_spreadsheet_url)
      run_locally do
        Dir.mktmpdir do |tmpdir|
          tmpfile = File.join(tmpdir, File.basename(fetch(:drive_env_local_path)))

          open(tmpfile, "w"){ |fh|
            fh.puts "## ============================================================="
            fh.puts "## This file is generated by drive_env"
            fh.puts "## Original spreadsheet is #{fetch(:drive_env_spreadsheet_url)}"
            fh.puts "## ============================================================="
            fh.puts ""
          }
          header_size = File.stat(tmpfile).size

          cmd = "drive_env spreadsheet to_env #{fetch(:drive_env_spreadsheet_url)} >> #{tmpfile}"
          sh cmd

          tmpsize = File.stat(tmpfile).size
          case
          when tmpsize <= header_size
            puts "\e[31;1m#{tmpfile} is only #{tmpsize} bytes, maybe drive_env failed.\e[0m"
            exit 1
          when !File.exist?(fetch(:drive_env_local_path))
            cp tmpfile, fetch(:drive_env_stage_env_file), verbose: true
            puts "\e[32;1m#{fetch(:drive_env_local_path)} created.\e[0m"
          when Digest::SHA1.digest(File.read(fetch(:drive_env_local_path))) == Digest::SHA1.digest(File.read(tmpfile))
            puts "\e[32;1m#{fetch(:drive_env_local_path)} is up to date.\e[0m"
          else
            backup = "#{fetch(:drive_env_local_path)}.#{Time.now.strftime('%Y%m%d%H%M%S')}"
            cp fetch(:drive_env_local_path), backup, verbose: true
            cp tmpfile, fetch(:drive_env_local_path), verbose: true
            puts "\e[32;1m#{fetch(:drive_env_local_path)} updated. (saved backup to #{backup})\e[0m"
          end
        end
      end
    end

    desc "Upload env file"
    task :uploa do
      on role(fetch(:drive_env_role)) do
        info "upload #{fetch(:drive_env_local_path)} to #{fetch(:drive_env_remote_path)}"
        dir = File.dirname(fetch(:drive_env_remote_path))
        if test "[ ! -d #{dir} ]"
          execute "mkdir -p #{dir}"
        end
        upload!(fetch(:drive_env_local_path), fetch(:drive_env_remote_path))
      end
    end
  end
end
